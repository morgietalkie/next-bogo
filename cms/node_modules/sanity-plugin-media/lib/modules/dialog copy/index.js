"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dialogShowConflictsEpic = exports.dialogClearEpic = exports.dialogShowRefs = exports.dialogShowConflicts = exports.dialogClear = exports.DialogActionTypes = void 0;
var immer_1 = __importDefault(require("immer"));
var redux_observable_1 = require("redux-observable");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var assets_1 = require("../assets");
/***********
 * ACTIONS *
 ***********/
var DialogActionTypes;
(function (DialogActionTypes) {
    DialogActionTypes["CLEAR"] = "DIALOG_CLEAR";
    DialogActionTypes["SHOW_CONFLICTS"] = "DIALOG_SHOW_CONFLICTS";
    DialogActionTypes["SHOW_REFS"] = "DIALOG_SHOW_REFS";
})(DialogActionTypes = exports.DialogActionTypes || (exports.DialogActionTypes = {}));
/***********
 * REDUCER *
 ***********/
/**
 * `asset` is a Sanity asset, which dialogs reference to display contextual information
 * `type` can be of type 'conflicts' or 'refs':
 * - `refs` displays all asset references, with an option to delete
 * - 'conflicts' is the same as refs, except rendered as a danger dialog with no option to delete
 */
var INITIAL_STATE = {
    asset: null,
    type: null
};
function dialogReducer(state, action) {
    if (state === void 0) { state = INITIAL_STATE; }
    return immer_1.default(state, function (draft) {
        var _a, _b;
        // eslint-disable-next-line default-case
        switch (action.type) {
            case DialogActionTypes.CLEAR:
                draft.asset = null;
                draft.type = null;
                break;
            case DialogActionTypes.SHOW_CONFLICTS: {
                var asset = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.asset;
                draft.asset = asset;
                draft.type = 'conflicts';
                break;
            }
            case DialogActionTypes.SHOW_REFS: {
                var asset = (_b = action.payload) === null || _b === void 0 ? void 0 : _b.asset;
                draft.asset = asset;
                draft.type = 'refs';
                break;
            }
        }
    });
}
exports.default = dialogReducer;
/*******************
 * ACTION CREATORS *
 *******************/
/**
 * Clear dialog
 */
exports.dialogClear = function () { return ({
    payload: {
        asset: null
    },
    type: DialogActionTypes.CLEAR
}); };
/**
 * Display asset conflict dialog
 */
exports.dialogShowConflicts = function (asset) { return ({
    payload: {
        asset: asset
    },
    type: DialogActionTypes.SHOW_CONFLICTS
}); };
/**
 * Display asset references
 */
exports.dialogShowRefs = function (asset) { return ({
    payload: {
        asset: asset
    },
    type: DialogActionTypes.SHOW_REFS
}); };
/*********
 * EPICS *
 *********/
/**
 * Listen for successful asset deletion:
 * - Clear dialog if the current dialog asset matches recently deleted asset
 */
exports.dialogClearEpic = function (action$, state$) {
    return action$.pipe(redux_observable_1.ofType(assets_1.AssetsActionTypes.DELETE_COMPLETE), operators_1.withLatestFrom(state$), operators_1.filter(function (_a) {
        var _b, _c, _d, _e;
        var action = _a[0], state = _a[1];
        var dialogAssetId = (_c = (_b = state.dialog) === null || _b === void 0 ? void 0 : _b.asset) === null || _c === void 0 ? void 0 : _c._id;
        var assetId = (_e = (_d = action.payload) === null || _d === void 0 ? void 0 : _d.asset) === null || _e === void 0 ? void 0 : _e._id;
        return assetId === dialogAssetId;
    }), operators_1.mergeMap(function () {
        return rxjs_1.of(exports.dialogClear());
    }));
};
/**
 * Listen for asset delete errors:
 * - Show error dialog if `handleTarget === 'dialog'`
 */
exports.dialogShowConflictsEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(assets_1.AssetsActionTypes.DELETE_ERROR), operators_1.filter(function (action) {
        var _a;
        var handleTarget = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.handleTarget;
        return handleTarget === 'dialog';
    }), operators_1.mergeMap(function (action) {
        var _a;
        var asset = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.asset;
        return rxjs_1.of(exports.dialogShowConflicts(asset));
    }));
};
