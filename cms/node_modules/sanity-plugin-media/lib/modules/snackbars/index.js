"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.snackbarsAddFetchErrorEpic = exports.snackbarsAddDeleteErrorsEpic = exports.snackbarsAddSuccessEpic = exports.snackbarsAddSuccess = exports.snackbarsAddError = exports.SnackbarsActionTypes = void 0;
var react_1 = __importDefault(require("react"));
var pluralize_1 = __importDefault(require("pluralize"));
var immer_1 = __importDefault(require("immer"));
var redux_observable_1 = require("redux-observable");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var assets_1 = require("../assets");
/***********
 * ACTIONS *
 ***********/
var SnackbarsActionTypes;
(function (SnackbarsActionTypes) {
    SnackbarsActionTypes["ADD"] = "SNACKBARS_ADD";
})(SnackbarsActionTypes = exports.SnackbarsActionTypes || (exports.SnackbarsActionTypes = {}));
/***********
 * REDUCER *
 ***********/
var INITIAL_STATE = {
    items: []
};
function snackbarsReducer(state, action) {
    if (state === void 0) { state = INITIAL_STATE; }
    return immer_1.default(state, function (draft) {
        var _a, _b, _c, _d, _e;
        // eslint-disable-next-line default-case
        switch (action.type) {
            case SnackbarsActionTypes.ADD: {
                var asset = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.asset;
                var kind = (_b = action.payload) === null || _b === void 0 ? void 0 : _b.kind;
                var subtitle = (_c = action.payload) === null || _c === void 0 ? void 0 : _c.subtitle;
                var timeout = (_d = action.payload) === null || _d === void 0 ? void 0 : _d.timeout;
                var title = (_e = action.payload) === null || _e === void 0 ? void 0 : _e.title;
                draft.items.push({
                    asset: asset,
                    id: String(new Date().getTime() + Math.floor(Math.random() * 10000)),
                    kind: kind,
                    subtitle: subtitle,
                    timeout: timeout,
                    title: title
                });
                break;
            }
        }
    });
}
exports.default = snackbarsReducer;
/*******************
 * ACTION CREATORS *
 *******************/
// Add error snackbar
exports.snackbarsAddError = function (_a) {
    var subtitle = _a.subtitle, title = _a.title;
    return ({
        payload: {
            kind: 'error',
            subtitle: subtitle,
            timeout: 8000,
            title: title
        },
        type: SnackbarsActionTypes.ADD
    });
};
// Add success snackbar
exports.snackbarsAddSuccess = function (_a) {
    var subtitle = _a.subtitle, title = _a.title;
    return ({
        payload: {
            kind: 'success',
            subtitle: subtitle,
            timeout: 4000,
            title: title
        },
        type: SnackbarsActionTypes.ADD
    });
};
/*********
 * EPICS *
 *********/
/**
 * Listen for successful asset deletes errors:
 * - Display success snackbar
 * - Buffer responses over 1000ms
 */
exports.snackbarsAddSuccessEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(assets_1.AssetsActionTypes.DELETE_COMPLETE), operators_1.bufferTime(1000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.mergeMap(function (actions) {
        var deletedCount = actions.length;
        return rxjs_1.of(exports.snackbarsAddSuccess({
            title: (react_1.default.createElement(react_1.default.Fragment, null,
                deletedCount,
                " ",
                pluralize_1.default('image', deletedCount),
                " deleted"))
        }));
    }));
};
/**
 * Listen for asset delete errors where `handleTarget == 'snackbar'`:
 * - Display error snackbar
 * - Buffer responses over 1000ms
 */
exports.snackbarsAddDeleteErrorsEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(assets_1.AssetsActionTypes.DELETE_ERROR), operators_1.filter(function (action) {
        var _a;
        var handleTarget = (_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.handleTarget;
        return handleTarget === 'snackbar';
    }), operators_1.bufferTime(1000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.mergeMap(function (actions) {
        var errorCount = actions.length;
        return rxjs_1.of(exports.snackbarsAddError({
            subtitle: 'Please view errors for more information',
            title: (react_1.default.createElement("strong", null,
                "Unable to delete ",
                errorCount,
                " ",
                pluralize_1.default('image', errorCount)))
        }));
    }));
};
/**
 * Listen for asset fetch errors:
 * - Display error snackbar
 */
exports.snackbarsAddFetchErrorEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(assets_1.AssetsActionTypes.FETCH_ERROR), operators_1.mergeMap(function (action) {
        var _a;
        var error = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.error;
        return rxjs_1.of(exports.snackbarsAddError({
            title: react_1.default.createElement("strong", null,
                "An error occured: ",
                error.toString())
        }));
    }));
};
