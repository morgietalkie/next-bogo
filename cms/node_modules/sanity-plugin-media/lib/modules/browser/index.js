"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.browserFetchPageEpic = exports.browserFetchNextPageEpic = exports.browserSetSearchQuery = exports.browserSetOrder = exports.browserSetFilter = exports.browserSetView = exports.browserFetchNextPage = exports.initialState = exports.BrowserActionTypes = void 0;
var immer_1 = __importDefault(require("immer"));
var redux_observable_1 = require("redux-observable");
var operators_1 = require("rxjs/operators");
var config_1 = require("../../config");
/***********
 * ACTIONS *
 ***********/
var BrowserActionTypes;
(function (BrowserActionTypes) {
    BrowserActionTypes["FETCH_NEXT_PAGE"] = "BROWSER_FETCH_NEXT_PAGE";
    BrowserActionTypes["SET_FILTER"] = "BROWSER_SET_FILTER";
    BrowserActionTypes["SET_ORDER"] = "BROWSER_SET_ORDER";
    BrowserActionTypes["SET_SEARCH_QUERY"] = "BROWSER_SET_SEARCH_QUERY";
    BrowserActionTypes["SET_VIEW"] = "BROWSER_SET_VIEW";
})(BrowserActionTypes = exports.BrowserActionTypes || (exports.BrowserActionTypes = {}));
/***********
 * REDUCER *
 ***********/
exports.initialState = {
    filter: undefined,
    filters: undefined,
    order: config_1.ORDERS[0],
    pageIndex: 0,
    replaceOnFetch: false,
    searchQuery: '',
    view: 'grid'
};
function browserReducer(state, action) {
    if (state === void 0) { state = exports.initialState; }
    return immer_1.default(state, function (draft) {
        var _a, _b, _c, _d;
        // eslint-disable-next-line default-case
        switch (action.type) {
            case BrowserActionTypes.FETCH_NEXT_PAGE:
                draft.pageIndex += 1;
                draft.replaceOnFetch = false;
                break;
            case BrowserActionTypes.SET_FILTER:
                draft.filter = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.filter;
                draft.pageIndex = 0;
                draft.replaceOnFetch = true;
                break;
            case BrowserActionTypes.SET_ORDER:
                draft.order = (_b = action.payload) === null || _b === void 0 ? void 0 : _b.order;
                draft.pageIndex = 0;
                draft.replaceOnFetch = true;
                break;
            case BrowserActionTypes.SET_SEARCH_QUERY:
                draft.searchQuery = (_c = action.payload) === null || _c === void 0 ? void 0 : _c.searchQuery;
                draft.pageIndex = 0;
                draft.replaceOnFetch = true;
                break;
            case BrowserActionTypes.SET_VIEW:
                draft.view = (_d = action.payload) === null || _d === void 0 ? void 0 : _d.view;
                break;
        }
    });
}
exports.default = browserReducer;
/*******************
 * ACTION CREATORS *
 *******************/
// TODO: use epic
// Fetch next page
exports.browserFetchNextPage = function () { return ({
    type: BrowserActionTypes.FETCH_NEXT_PAGE
}); };
// Set view mode
exports.browserSetView = function (view) { return ({
    payload: {
        view: view
    },
    type: BrowserActionTypes.SET_VIEW
}); };
// Set filter
exports.browserSetFilter = function (filter) { return ({
    payload: {
        filter: filter
    },
    type: BrowserActionTypes.SET_FILTER
}); };
// Set order
exports.browserSetOrder = function (order) { return ({
    payload: {
        order: order
    },
    type: BrowserActionTypes.SET_ORDER
}); };
// Set search query
exports.browserSetSearchQuery = function (searchQuery) { return ({
    payload: {
        searchQuery: searchQuery
    },
    type: BrowserActionTypes.SET_SEARCH_QUERY
}); };
/*********
 * EPICS *
 *********/
exports.browserFetchNextPageEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(BrowserActionTypes.FETCH_NEXT_PAGE), operators_1.tap(function () {
        // console.log('fetch next page')
    }), operators_1.ignoreElements());
};
exports.browserFetchPageEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(BrowserActionTypes.SET_ORDER, BrowserActionTypes.SET_FILTER, BrowserActionTypes.SET_SEARCH_QUERY), operators_1.tap(function () {
        // console.log('fetch from beginning')
    }), operators_1.ignoreElements());
};
