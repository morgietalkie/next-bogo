"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAssetBrowserActions = exports.AssetBrowserDispatchProvider = void 0;
var react_1 = __importStar(require("react"));
var react_redux_1 = require("react-redux");
var assets_1 = require("../modules/assets");
var dialog_1 = require("../modules/dialog");
var AssetBrowserDispatchContext = react_1.createContext(undefined);
exports.AssetBrowserDispatchProvider = function (props) {
    var children = props.children, onSelect = props.onSelect;
    var dispatch = react_redux_1.useDispatch();
    var contextValue = {
        onDelete: function (asset, handleTarget) { return dispatch(assets_1.assetsDelete(asset, handleTarget)); },
        onDeletePicked: function () { return dispatch(assets_1.assetsDeletePicked()); },
        onDialogShowConflicts: function (asset) { return dispatch(dialog_1.dialogShowConflicts(asset)); },
        onDialogShowRefs: function (asset) { return dispatch(dialog_1.dialogShowRefs(asset)); },
        onFetch: function (options) {
            dispatch(assets_1.assetsFetch(options));
        },
        onPick: function (assetId, value) { return dispatch(assets_1.assetsPick(assetId, value)); },
        onPickAll: function () { return dispatch(assets_1.assetsPickAll()); },
        onPickClear: function () { return dispatch(assets_1.assetsPickClear()); },
        onSelect: onSelect
    };
    return (react_1.default.createElement(AssetBrowserDispatchContext.Provider, { value: contextValue }, children));
};
exports.useAssetBrowserActions = function () {
    var context = react_1.useContext(AssetBrowserDispatchContext);
    if (context === undefined) {
        throw new Error('useAssetBrowserActions must be used within an AssetBrowserDispatchProvider');
    }
    return context;
};
exports.default = AssetBrowserDispatchContext;
