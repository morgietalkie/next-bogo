"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var immer_1 = __importDefault(require("immer"));
var react_1 = __importStar(require("react"));
var react_virtualized_auto_sizer_1 = __importDefault(require("react-virtualized-auto-sizer"));
var react_window_infinite_loader_1 = __importDefault(require("react-window-infinite-loader"));
var use_deep_compare_effect_1 = __importDefault(require("use-deep-compare-effect"));
var AssetBrowserDispatchContext_1 = require("../../contexts/AssetBrowserDispatchContext");
var AssetBrowserStateContext_1 = require("../../contexts/AssetBrowserStateContext");
var config_1 = require("../../config");
var Box_1 = __importDefault(require("../Box"));
var Footer_1 = __importDefault(require("../Footer"));
var Header_1 = __importDefault(require("../Header"));
var CardView_1 = __importDefault(require("../CardView"));
var TableView_1 = __importDefault(require("../TableView"));
var PER_PAGE = 50;
var Browser = function (props) {
    var currentDocument = props.document, onClose = props.onClose, selectedAssets = props.selectedAssets;
    // Get available filters, depending on whether the `document` prop is available or not.
    var filters = config_1.getFilters(currentDocument);
    // Ref used to scroll to the top of the page on filter changes
    var viewRef = react_1.useRef(null);
    var onFetch = AssetBrowserDispatchContext_1.useAssetBrowserActions().onFetch;
    var _a = AssetBrowserStateContext_1.useAssetBrowserState(), fetchCount = _a.fetchCount, fetching = _a.fetching, items = _a.items;
    var _b = react_1.useState({
        filter: filters[0],
        order: config_1.ORDERS[0],
        pageIndex: 0,
        replaceOnFetch: false,
    }), browserQueryOptions = _b[0], setBrowserQueryOptions = _b[1];
    var _c = react_1.useState(config_1.VIEWS[0]), browserView = _c[0], setBrowserView = _c[1];
    // const hasFetchedOnce = totalCount >= 0
    var hasFetchedOnce = fetchCount >= 0;
    var hasItems = items.length > 0;
    var picked = items.filter(function (item) { return item.picked; });
    var hasPicked = picked.length > 0;
    var fetchPage = function (index, replace) {
        var filter = browserQueryOptions.filter, order = browserQueryOptions.order;
        var start = index * PER_PAGE;
        var end = start + PER_PAGE;
        var sort = "order(" + order.value + ")";
        var selector = "[" + start + "..." + end + "]";
        // ID can be null when operating on pristine / unsaved drafts
        var currentDocumentId = currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument._id;
        onFetch(__assign(__assign({ filter: filter.value }, (currentDocumentId ? { params: { documentId: currentDocumentId } } : {})), { projections: "{\n        _id,\n        _type,\n        _updatedAt,\n        extension,\n        metadata {\n          dimensions,\n          isOpaque,\n        },\n        originalFilename,\n        pluginMedia,\n        size,\n        url\n      }", replace: replace,
            selector: selector,
            sort: sort }));
    };
    var scrollToTop = function () {
        var viewEl = viewRef && viewRef.current;
        if (viewEl) {
            viewEl.scrollTo(0, 0);
        }
    };
    // Fetch items on mount and when query options have changed
    use_deep_compare_effect_1.default(function () {
        var pageIndex = browserQueryOptions.pageIndex, replaceOnFetch = browserQueryOptions.replaceOnFetch;
        fetchPage(pageIndex, replaceOnFetch);
        // Scroll to top when replacing items
        if (replaceOnFetch) {
            scrollToTop();
        }
    }, [browserQueryOptions]);
    // Scroll to top when browser view has changed
    react_1.useEffect(function () {
        scrollToTop();
    }, [browserView]);
    // NOTE: The below is a workaround and can be inaccurate in certain cases.
    // e.g. if PER_PAGE is 10 and you have fetched 10 items, `hasMore` will still be true
    // and another fetch will invoked on next page (which will return 0 items).
    // This is currently how the default asset source in Sanity works.
    // TODO: When it's performant enough to get total asset count across large datasets, revert
    // to using `totalCount` across the board.
    var hasMore = fetchCount === PER_PAGE;
    // const hasMore = (browserQueryOptions.pageIndex + 1) * PER_PAGE < totalCount
    var handleFetchNextPage = function () {
        setBrowserQueryOptions(immer_1.default(function (draft) {
            draft.pageIndex += 1;
            draft.replaceOnFetch = false;
        }));
    };
    var handleUpdateBrowserQueryOptions = function (field, value) {
        setBrowserQueryOptions(immer_1.default(function (draft) {
            draft[field] = value;
            draft.pageIndex = 0;
            draft.replaceOnFetch = true;
        }));
    };
    var handleUpdateBrowserView = function (view) {
        setBrowserView(view);
    };
    // Every row is loaded except for our loading indicator row.
    var isItemLoaded = function (index) {
        return index < items.length;
    };
    // Only load 1 page of items at a time.
    // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.
    var handleLoadMoreItems = function () {
        if (!fetching) {
            handleFetchNextPage();
        }
        return new Promise(function () { });
    };
    // If there are more items to be loaded then add an extra placeholder row to trigger additional page loads.
    var itemCount = hasMore ? items.length + 1 : items.length;
    return (react_1.default.createElement(Box_1.default, { bg: "darkerGray", fontSize: 1, justifyContent: "space-between", minHeight: "100%" },
        react_1.default.createElement(Header_1.default, { browserQueryOptions: browserQueryOptions, browserView: browserView, currentDocument: currentDocument, filters: filters, items: items, onClose: onClose, onUpdateBrowserQueryOptions: handleUpdateBrowserQueryOptions, onUpdateBrowserView: handleUpdateBrowserView }),
        react_1.default.createElement(Box_1.default, { bottom: [hasPicked ? 'headerHeight.0' : 0, hasPicked ? 'headerHeight.1' : 0], mx: "auto", overflow: "hidden", position: "absolute", ref: viewRef, top: [currentDocument ? 'headerHeight.0' : 'headerHeight.1', 'headerHeight.1'], width: "100%" },
            hasItems && (browserView.value === 'grid' || 'table') && (react_1.default.createElement(react_virtualized_auto_sizer_1.default, null, function (_a) {
                var height = _a.height, width = _a.width;
                return (react_1.default.createElement(react_window_infinite_loader_1.default, { isItemLoaded: isItemLoaded, itemCount: itemCount, loadMoreItems: handleLoadMoreItems }, function (_a) {
                    var onItemsRendered = _a.onItemsRendered, ref = _a.ref;
                    // View: Table
                    if (browserView.value === 'table') {
                        return (react_1.default.createElement(TableView_1.default, { height: height, items: items, itemCount: itemCount, onItemsRendered: onItemsRendered, ref: ref, selectedAssets: selectedAssets, width: width }));
                    }
                    // View: Grid
                    if (browserView.value === 'grid') {
                        // The `onItemsRendered` method signature for `react-window` grids is different and
                        // requires an adaptor, below.
                        // Source: https://github.com/bvaughn/react-window-infinite-loader/issues/3
                        var newItemsRendered = function (gridData) {
                            var overscanRowStartIndex = gridData.overscanRowStartIndex, overscanRowStopIndex = gridData.overscanRowStopIndex, overscanColumnStopIndex = gridData.overscanColumnStopIndex;
                            var endCol = overscanColumnStopIndex + 1;
                            var startRow = overscanRowStartIndex;
                            var endRow = overscanRowStopIndex;
                            var visibleStartIndex = startRow * endCol;
                            var visibleStopIndex = endRow * endCol;
                            onItemsRendered({
                                overscanStartIndex: visibleStartIndex - 10,
                                overscanStopIndex: visibleStopIndex + 10,
                                visibleStartIndex: visibleStartIndex,
                                visibleStopIndex: visibleStopIndex,
                            });
                        };
                        return (react_1.default.createElement(CardView_1.default, { height: height, items: items, itemCount: itemCount, onItemsRendered: newItemsRendered, ref: ref, focusedId: picked.length === 1 ? picked[0].asset._id : undefined, selectedAssets: selectedAssets, width: width }));
                    }
                }));
            })),
            !hasItems && hasFetchedOnce && !fetching && (react_1.default.createElement(Box_1.default, { color: "lighterGray", fontSize: 1, p: 3 }, "No results for the current query"))),
        hasPicked && react_1.default.createElement(Footer_1.default, null)));
};
exports.default = Browser;
