"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var router_1 = require("part:@sanity/base/router");
var preview_1 = __importDefault(require("part:@sanity/base/preview"));
var schema_1 = __importDefault(require("part:@sanity/base/schema"));
var react_1 = __importDefault(require("react"));
var styled_components_1 = __importDefault(require("styled-components"));
var Box_1 = __importDefault(require("../../styled/Box"));
// Brute force styles on all of Sanity's preview components.
// TODO: Consider using a custom preview component that is able to resolve custom titles
// (and potentially subtitles) defined at the document schema level. Or anything to ensure
// that future upstream changes to Sanity's preview components don't break anything here.
var Container = styled_components_1.default(Box_1.default)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  * {\n    color: ", ";\n    font-size: ", ";\n  }\n"], ["\n  * {\n    color: ", ";\n    font-size: ", ";\n  }\n"])), function (props) { return props.theme.colors.lighterGray; }, function (props) { var _a; return (_a = props.theme.fontSizes) === null || _a === void 0 ? void 0 : _a[1]; });
var DocumentList = function (props) {
    var documents = props.documents;
    return (react_1.default.createElement(Box_1.default, null, documents.map(function (doc) {
        var schemaType = schema_1.default.get(doc._type);
        if (!schemaType) {
            return (react_1.default.createElement("div", null,
                "A document of the unknown type ",
                react_1.default.createElement("em", null, doc._type)));
        }
        return (react_1.default.createElement(Container, { key: doc._id, mb: 1 },
            react_1.default.createElement(router_1.IntentLink, { intent: "edit", params: { id: doc._id }, key: doc._id },
                react_1.default.createElement(preview_1.default, { layout: "default", value: doc, type: schemaType }))));
    })));
};
exports.default = DocumentList;
var templateObject_1;
