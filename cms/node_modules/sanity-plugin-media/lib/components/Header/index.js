"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var io_1 = require("react-icons/io");
// import pluralize from 'pluralize'
// import FileInputButton from 'part:@sanity/components/fileinput/button'
// import FaUpload from 'react-icons/lib/fa/upload'
var config_1 = require("../../config");
var AssetBrowserStateContext_1 = require("../../contexts/AssetBrowserStateContext");
var blocksToText_1 = __importDefault(require("../../utils/blocksToText"));
var Box_1 = __importDefault(require("../Box"));
var Button_1 = __importDefault(require("../Button"));
var ButtonToggle_1 = __importDefault(require("../ButtonToggle"));
var Progress_1 = __importDefault(require("../Progress"));
var Select_1 = __importDefault(require("../Select"));
var Header = function (props) {
    var _a;
    var browserQueryOptions = props.browserQueryOptions, browserView = props.browserView, currentDocument = props.currentDocument, filters = props.filters, onClose = props.onClose, onUpdateBrowserQueryOptions = props.onUpdateBrowserQueryOptions, onUpdateBrowserView = props.onUpdateBrowserView;
    var fetching = AssetBrowserStateContext_1.useAssetBrowserState().fetching;
    // Try and infer title from `name` and `title` fields, in that order.
    // Convert blocks to plain text and trim extra whitespace.
    // If no title is found, the current document ID will be displayed instead.
    var currentDocumentTitle = (_a = blocksToText_1.default((currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.name) || (currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.title))) === null || _a === void 0 ? void 0 : _a.trim();
    return (react_1.default.createElement(Box_1.default, { alignItems: "center", bg: "darkestGray", color: "lighterGray", display: "flex", flexDirection: ['column', 'row'], flexWrap: "wrap", height: [
            currentDocument ? 'headerHeight.0' : 'headerHeight.1',
            'headerHeight.1',
        ], justifyContent: "space-between", overflow: "hidden", position: "absolute", top: 0, whiteSpace: "nowrap", width: "100%" },
        react_1.default.createElement(Progress_1.default, { key: browserQueryOptions.pageIndex, loading: fetching }),
        currentDocument && (react_1.default.createElement(Box_1.default, { alignItems: "center", display: "flex", flex: "3 0", height: "headerHeight.1", justifyContent: "space-between", overflow: "hidden", textAlign: "left", width: ['100%', 'auto'] },
            react_1.default.createElement(Box_1.default, { bg: "darkGray", borderRadius: "2px", color: "lighterGray", fontSize: 1, fontWeight: 500, maxWidth: "500px", mx: 2, overflow: "hidden", px: 2, py: 1, textOverflow: "ellipsis" },
                react_1.default.createElement(Box_1.default, { color: "lightGray", fontSize: 0, display: "inline", mr: 2, py: 1, textTransform: "uppercase" },
                    currentDocument._type,
                    " ",
                    !currentDocumentTitle && 'id'),
                currentDocumentTitle ? currentDocumentTitle : currentDocument._id),
            onClose && (react_1.default.createElement(Box_1.default, { bg: "darkGray", display: ['block', 'none'], height: "100%" },
                react_1.default.createElement(Button_1.default, { bleed: true, onClick: onClose },
                    react_1.default.createElement(io_1.IoIosClose, { size: 25 })))))),
        react_1.default.createElement(Box_1.default, { alignItems: "center", display: "flex", height: "headerHeight.1", justifyContent: ['space-between', 'flex-end'], textAlign: "right", width: ['100%', 'auto'] },
            react_1.default.createElement(Box_1.default, { display: "flex", height: "100%" }, config_1.VIEWS &&
                config_1.VIEWS.map(function (view, index) {
                    var selected = browserView.value === view.value;
                    // const Icon = view.icon.bind(undefined, { size: 18 })
                    var Icon = view.icon;
                    return (react_1.default.createElement(ButtonToggle_1.default, { active: selected, 
                        // color={selected ? }
                        key: index, onClick: function () { return onUpdateBrowserView(view); } },
                        react_1.default.createElement(Icon, { size: 18 })));
                })),
            react_1.default.createElement(Box_1.default, { display: "flex", height: "100%" },
                react_1.default.createElement(Select_1.default, { bleed: true, defaultValue: browserQueryOptions.filter, items: filters, onChange: function (option) {
                        return onUpdateBrowserQueryOptions('filter', option);
                    } }),
                react_1.default.createElement(Select_1.default, { bleed: true, defaultValue: browserQueryOptions.order, items: config_1.ORDERS, onChange: function (option) {
                        return onUpdateBrowserQueryOptions('order', option);
                    } })),
            onClose && (react_1.default.createElement(Box_1.default, { display: [currentDocument ? 'none' : 'flex', 'flex'], height: "100%" },
                react_1.default.createElement(Button_1.default, { bleed: true, onClick: onClose },
                    react_1.default.createElement(io_1.IoIosClose, { size: 25 })))))));
};
exports.default = Header;
