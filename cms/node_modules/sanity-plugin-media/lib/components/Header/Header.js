"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var ai_1 = require("react-icons/ai");
var io_1 = require("react-icons/io");
var react_redux_1 = require("react-redux");
var config_1 = require("../../config");
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var assets_1 = require("../../modules/assets");
var Box_1 = __importDefault(require("../../styled/Box"));
var blocksToText_1 = __importDefault(require("../../util/blocksToText"));
var Button_1 = __importDefault(require("../Button/Button"));
var Label_1 = __importDefault(require("../Label/Label"));
var Progress_1 = __importDefault(require("../Progress/Progress"));
var SearchInput_1 = __importDefault(require("../SearchInput/SearchInput"));
var Select_1 = __importDefault(require("../Select/Select"));
var Header = function (props) {
    var _a;
    var onClose = props.onClose;
    // Redux
    var dispatch = react_redux_1.useDispatch();
    var currentDocument = useTypedSelector_1.default(function (state) { return state.document; });
    var fetching = useTypedSelector_1.default(function (state) { return state.assets.fetching; });
    var view = useTypedSelector_1.default(function (state) { return state.assets.view; });
    var filters = useTypedSelector_1.default(function (state) { return state.assets.filters; });
    var pageIndex = useTypedSelector_1.default(function (state) { return state.assets.pageIndex; });
    // Try and infer title from `name` and `title` fields, in that order.
    // Convert blocks to plain text and trim extra whitespace.
    // If no title is found, the current document ID will be displayed instead.
    var currentDocumentTitle = (_a = blocksToText_1.default((currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.name) || (currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.title))) === null || _a === void 0 ? void 0 : _a.trim();
    return (react_1.default.createElement(Box_1.default, { alignItems: "center", bg: "darkestGray", justifyContent: "space-between", overflow: "hidden", position: "absolute", textColor: "lighterGray", top: 0, whiteSpace: "nowrap", width: "100%" },
        currentDocument && (react_1.default.createElement(Box_1.default, { alignItems: "center", display: "flex", height: "headerRowHeight", justifyContent: "space-between", overflow: "hidden", textAlign: "left", width: "100%" },
            react_1.default.createElement(Label_1.default, { minWidth: 0, title: currentDocumentTitle ? currentDocumentTitle : currentDocument._id, type: currentDocument._type + " " + (!currentDocumentTitle ? 'id' : '') }),
            onClose && (react_1.default.createElement(Box_1.default
            // bg="darkerGray"
            , { 
                // bg="darkerGray"
                flexShrink: 0, height: "100%" },
                react_1.default.createElement(Button_1.default, { icon: io_1.IoIosClose({ size: 25 }), onClick: onClose }))))),
        react_1.default.createElement(Box_1.default, { alignItems: ['flex-start', 'center'], display: "flex", flexDirection: ['column', 'row'], height: ['headerRowHeight2x', 'headerRowHeight'], justifyContent: "space-between", textAlign: "right", width: "100%" },
            react_1.default.createElement(Box_1.default, { alignItems: "center", display: "flex", flexGrow: 1, height: "100%", justifyContent: "flex-start", width: "100%" },
                react_1.default.createElement(SearchInput_1.default, { maxWidth: ['none', '340px'], mx: 2 })),
            react_1.default.createElement(Box_1.default, { alignItems: "center", display: "flex", height: "100%", justifyContent: ['space-between', 'flex-end'], width: "100%" },
                react_1.default.createElement(Box_1.default, { display: "flex" },
                    react_1.default.createElement(Button_1.default, { icon: ai_1.AiFillAppstore({ size: 18 }), onClick: function () { return dispatch(assets_1.assetsSetView('grid')); }, pointerEvents: view === 'grid' ? 'none' : 'auto', variant: view === 'grid' ? 'default' : 'secondary' }),
                    react_1.default.createElement(Button_1.default, { icon: ai_1.AiOutlineBars({ size: 18 }), onClick: function () { return dispatch(assets_1.assetsSetView('table')); }, pointerEvents: view === 'table' ? 'none' : 'auto', variant: view === 'table' ? 'default' : 'secondary' })),
                react_1.default.createElement(Box_1.default, null,
                    filters && (react_1.default.createElement(Select_1.default, { items: filters, ml: 2, onChange: function (value) { return dispatch(assets_1.assetsSetFilter(value)); } })),
                    react_1.default.createElement(Select_1.default, { items: config_1.ORDERS, mx: 2, onChange: function (value) { return dispatch(assets_1.assetsSetOrder(value)); } })))),
        react_1.default.createElement(Progress_1.default, { key: pageIndex, loading: fetching })));
};
exports.default = Header;
