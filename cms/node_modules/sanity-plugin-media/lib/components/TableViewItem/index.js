"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var formatRelative_1 = __importDefault(require("date-fns/formatRelative"));
var filesize_1 = __importDefault(require("filesize"));
var react_1 = __importStar(require("react"));
var io_1 = require("react-icons/io");
var error_icon_1 = __importDefault(require("part:@sanity/base/error-icon"));
var spinner_1 = __importDefault(require("part:@sanity/components/loading/spinner"));
var AssetBrowserDispatchContext_1 = require("../../contexts/AssetBrowserDispatchContext");
var imageDprUrl_1 = __importDefault(require("../../utils/imageDprUrl"));
var Box_1 = __importDefault(require("../Box"));
var BoxResponsive_1 = __importDefault(require("../BoxResponsive"));
var Button_1 = __importDefault(require("../Button"));
var Image_1 = __importDefault(require("../Image"));
var TableViewItem = function (props) {
    var _a, _b, _c, _d;
    var item = props.item, selected = props.selected, shiftPressed = props.shiftPressed, style = props.style;
    var _e = AssetBrowserDispatchContext_1.useAssetBrowserActions(), onDialogShowConflicts = _e.onDialogShowConflicts, onPick = _e.onPick, onPickClear = _e.onPickClear;
    var asset = item === null || item === void 0 ? void 0 : item.asset;
    var dimensions = (_b = (_a = item === null || item === void 0 ? void 0 : item.asset) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.dimensions;
    var errorCode = item === null || item === void 0 ? void 0 : item.errorCode;
    var isOpaque = (_d = (_c = item === null || item === void 0 ? void 0 : item.asset) === null || _c === void 0 ? void 0 : _c.metadata) === null || _d === void 0 ? void 0 : _d.isOpaque;
    var picked = item === null || item === void 0 ? void 0 : item.picked;
    var updating = item === null || item === void 0 ? void 0 : item.updating;
    // Short circuit if no asset is available
    if (!asset) {
        return null;
    }
    var handleAssetPick = function () {
        if (!shiftPressed) {
            onPickClear();
            onPick(asset._id, true);
        }
        else {
            onPick(asset._id, !picked);
        }
    };
    var handleDialogConflicts = function (e) {
        e.stopPropagation();
        onDialogShowConflicts(asset);
    };
    var cellOpacity = updating ? 0.5 : 1;
    var imageUrl = imageDprUrl_1.default(asset, 100);
    var imageOpacity = selected || updating ? 0.25 : 1;
    return (react_1.default.createElement(Box_1.default, { alignItems: "center", bg: picked ? 'overlayTableRow' : 'none', color: "lightGray", display: "grid", fontSize: 1, gridColumnGap: [3, 2], gridTemplateColumns: ['tableSmall', 'tableLarge'], gridTemplateRows: ['auto', '1fr'], height: ['tableRowHeight.0', 'tableRowHeight.1'], onClick: handleAssetPick, px: [3, 2], py: [2, 0], style: style, transition: "background 250ms", userSelect: "none", whiteSpace: "nowrap" },
        react_1.default.createElement(Box_1.default, { gridColumn: [1, 1], gridRowStart: ['1', 'auto'], gridRowEnd: ['span 5', 'auto'] },
            react_1.default.createElement(BoxResponsive_1.default, { aspectRatio: 4 / 3 },
                react_1.default.createElement(Image_1.default, { draggable: false, opacity: imageOpacity, showCheckerboard: !isOpaque, src: imageUrl }),
                selected && (react_1.default.createElement(Box_1.default, { alignItems: "center", color: "white", display: "flex", justifyContent: "center", left: 0, position: "absolute", size: "100%", top: 0 },
                    react_1.default.createElement(io_1.IoMdCheckmarkCircle, { size: 16 }))),
                updating && (react_1.default.createElement(Box_1.default, { alignItems: "center", color: "white", display: "flex", fontSize: 2, justifyContent: "center", left: 0, position: "absolute", size: "100%", top: 0 },
                    react_1.default.createElement(spinner_1.default, null))))),
        react_1.default.createElement(Box_1.default, { gridColumn: [2, 2], gridRow: [1, 'auto'], opacity: cellOpacity, overflow: "hidden", textOverflow: "ellipsis" },
            react_1.default.createElement("strong", null, asset.originalFilename)),
        react_1.default.createElement(Box_1.default, { gridColumn: [2, 3], gridRow: [2, 'auto'], opacity: cellOpacity },
            dimensions.width || '??',
            " x ",
            dimensions.height || '??'),
        react_1.default.createElement(Box_1.default, { gridColumn: [2, 4], gridRow: [3, 'auto'], opacity: cellOpacity }, asset.extension.toUpperCase()),
        react_1.default.createElement(Box_1.default, { gridColumn: [2, 5], gridRow: [4, 'auto'], opacity: cellOpacity }, filesize_1.default(asset.size, { round: 0 })),
        react_1.default.createElement(Box_1.default, { gridColumn: [2, 6], gridRow: [5, 'auto'], opacity: cellOpacity }, formatRelative_1.default(new Date(asset._updatedAt), new Date())),
        react_1.default.createElement(Box_1.default, { gridColumn: [3, 7], gridRowStart: "1", gridRowEnd: ['span 5', 'auto'], mx: "auto" }, errorCode && (react_1.default.createElement(Button_1.default, { onClick: handleDialogConflicts, variant: "danger" },
            react_1.default.createElement(error_icon_1.default, { size: 18 }))))));
};
exports.default = react_1.memo(TableViewItem);
