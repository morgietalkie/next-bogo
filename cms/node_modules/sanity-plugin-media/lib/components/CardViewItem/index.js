"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var io_1 = require("react-icons/io");
var error_icon_1 = __importDefault(require("part:@sanity/base/error-icon"));
var spinner_1 = __importDefault(require("part:@sanity/components/loading/spinner"));
var AssetBrowserDispatchContext_1 = require("../../contexts/AssetBrowserDispatchContext");
var imageDprUrl_1 = __importDefault(require("../../utils/imageDprUrl"));
var Box_1 = __importDefault(require("../Box"));
var BoxResponsive_1 = __importDefault(require("../BoxResponsive"));
var Button_1 = __importDefault(require("../Button"));
var Image_1 = __importDefault(require("../Image"));
var CardViewItem = function (props) {
    var _a, _b;
    var focused = props.focused, item = props.item, selected = props.selected, shiftPressed = props.shiftPressed, style = props.style;
    var asset = item === null || item === void 0 ? void 0 : item.asset;
    var errorCode = item === null || item === void 0 ? void 0 : item.errorCode;
    var isOpaque = (_b = (_a = item === null || item === void 0 ? void 0 : item.asset) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.isOpaque;
    var picked = item === null || item === void 0 ? void 0 : item.picked;
    var updating = item === null || item === void 0 ? void 0 : item.updating;
    var _c = AssetBrowserDispatchContext_1.useAssetBrowserActions(), onDialogShowConflicts = _c.onDialogShowConflicts, onPick = _c.onPick, onPickClear = _c.onPickClear, onSelect = _c.onSelect;
    // Short circuit if no asset is available
    if (!asset) {
        return null;
    }
    // Unpick all and pick current on click. If the shift key is held, toggle picked state only.
    var handleAssetPick = function () {
        if (!shiftPressed) {
            onPickClear();
            onPick(asset._id, true);
        }
        else {
            onPick(asset._id, !picked);
        }
    };
    var handleDialogConflicts = function (event) {
        event.stopPropagation();
        onDialogShowConflicts(asset);
    };
    var handleSelect = function () {
        if (onSelect) {
            onSelect([
                {
                    kind: 'assetDocumentId',
                    value: asset._id,
                },
            ]);
        }
    };
    var imageUrl = imageDprUrl_1.default(asset, 250);
    var imageOpacity = updating ? 0.25 : selected && !picked ? 0.25 : 1;
    return (react_1.default.createElement(Box_1.default, { alignItems: "center", bg: picked ? 'overlayCard' : 'none', borderRadius: "4px", display: "flex", justifyContent: "center", onClick: handleAssetPick, p: 2, position: "relative", style: style, transition: "background 250ms", userSelect: "none" },
        react_1.default.createElement(BoxResponsive_1.default, { aspectRatio: 4 / 3 },
            react_1.default.createElement(Image_1.default, { draggable: false, opacity: imageOpacity, showCheckerboard: !isOpaque, src: imageUrl, transition: "opacity 1000ms" }),
            selected && (react_1.default.createElement(Box_1.default, { bottom: 0, color: "white", p: 2, position: "absolute", right: 0 },
                react_1.default.createElement(io_1.IoIosCheckmarkCircle, { size: 18 }))),
            updating && (react_1.default.createElement(Box_1.default, { alignItems: "center", color: "white", display: "flex", fontSize: 3, justifyContent: "center", left: 0, position: "absolute", size: "100%", top: 0 },
                react_1.default.createElement(spinner_1.default, null))),
            focused && onSelect && !selected && (react_1.default.createElement(Box_1.default, { bottom: 0, color: "white", position: "absolute", right: 0 },
                react_1.default.createElement(Button_1.default, { onClick: handleSelect },
                    react_1.default.createElement(io_1.IoIosCheckmarkCircleOutline, { size: 18 })))),
            errorCode && (react_1.default.createElement(Box_1.default, { bottom: 0, color: "white", position: "absolute", right: 0, top: 0 },
                react_1.default.createElement(Button_1.default, { onClick: handleDialogConflicts, variant: "danger" },
                    react_1.default.createElement(error_icon_1.default, { size: 18 })))))));
};
exports.default = react_1.memo(CardViewItem);
