"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_media_1 = __importDefault(require("config:media"));
var default_1 = __importDefault(require("part:@sanity/components/formfields/default"));
var default_2 = __importDefault(require("part:@sanity/components/textinputs/default"));
var react_1 = __importStar(require("react"));
var react_redux_1 = require("react-redux");
var react_hook_form_1 = require("react-hook-form");
var assets_1 = require("../../modules/assets");
var dialog_1 = require("../../modules/dialog");
var Dialog_1 = __importDefault(require("../Dialog"));
var DialogCustomFields = function (props) {
    var item = props.item;
    var customFields = config_media_1.default.customFields;
    var dispatch = react_redux_1.useDispatch();
    var _a = react_hook_form_1.useForm({
        defaultValues: item.asset.pluginMedia,
    }), control = _a.control, /* errors, */ formState = _a.formState, getValues = _a.getValues, handleSubmit = _a.handleSubmit, reset = _a.reset;
    var handleClose = react_1.useCallback(function () {
        dispatch(dialog_1.dialogClear());
    }, []);
    var handleFormSubmit = react_1.useCallback(function (data) {
        dispatch(assets_1.assetsUpdate(item.asset, data));
    }, []);
    // Reset form with updated values and clear dirty state when:
    // - an updated asset has been pass down via redux actions
    // - react-hook-form has successfully submitted
    react_1.useEffect(function () {
        if (formState.isSubmitted) {
            reset(item.asset.pluginMedia);
        }
    }, [item]);
    var dialogActions = [
        {
            callback: handleSubmit(handleFormSubmit.bind(getValues())),
            color: 'success',
            disabled: !formState.dirty || item.updating,
            title: item.updating ? 'Updating' : 'Update',
        },
        {
            callback: handleClose,
            title: 'Close',
        },
    ];
    // TODO: display form errors
    return (react_1.default.createElement(Dialog_1.default, { actions: dialogActions, asset: item.asset, onClose: handleClose, size: "large", title: "Custom fields" },
        react_1.default.createElement("div", null,
            react_1.default.createElement("form", { onSubmit: handleSubmit(handleFormSubmit) },
                customFields.map(function (field, index) { return (react_1.default.createElement(default_1.default, { description: field.description, label: field.title, key: index, labelFor: field.name },
                    react_1.default.createElement(react_hook_form_1.Controller, { as: react_1.default.createElement(default_2.default, null), control: control, defaultValue: item.asset.pluginMedia && item.asset.pluginMedia[field.name], disabled: item.updating, id: field.name, name: field.name }))); }),
                react_1.default.createElement("input", { type: "submit", style: { display: 'none' } })))));
};
exports.default = DialogCustomFields;
