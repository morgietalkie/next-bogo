"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_window_1 = require("react-window");
var Table_1 = __importDefault(require("../Item/Table"));
var useKeyPress_1 = __importDefault(require("../../hooks/useKeyPress"));
var Box_1 = __importDefault(require("../../styled/Box"));
var useThemeBreakpointValue_1 = __importDefault(require("../../hooks/useThemeBreakpointValue"));
var innerElementType = function (props) {
    var children = props.children, style = props.style;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(Box_1.default, { alignItems: "center", bg: "darkestGray", display: ['none', 'grid'], gridColumnGap: 2, gridTemplateColumns: "tableLarge", height: "tableHeaderHeight", letterSpacing: "0.025em", position: "sticky", px: [0, 2], textColor: "lighterGray", textTransform: "uppercase", top: 0, width: "100%", zIndex: "header" },
            react_1.default.createElement(Box_1.default, { textAlign: "left" }),
            react_1.default.createElement(Box_1.default, { textAlign: "left" }, "Original filename"),
            react_1.default.createElement(Box_1.default, { textAlign: "left" }, "Dimensions"),
            react_1.default.createElement(Box_1.default, { textAlign: "left" }, "Type"),
            react_1.default.createElement(Box_1.default, { textAlign: "left" }, "Size"),
            react_1.default.createElement(Box_1.default, { textAlign: "left" }, "Last updated"),
            react_1.default.createElement(Box_1.default, { textAlign: "left" })),
        react_1.default.createElement(Box_1.default, { position: "absolute", top: [0, 'tableHeaderHeight'], width: "100%" },
            react_1.default.createElement("div", { style: style }, children))));
};
var VirtualRow = react_1.memo(function (_a) {
    var _b;
    var data = _a.data, index = _a.index, style = _a.style;
    if (!data) {
        return null;
    }
    var items = data.items, selectedIds = data.selectedIds, shiftPressed = data.shiftPressed;
    var item = items[index];
    var assetId = (_b = item === null || item === void 0 ? void 0 : item.asset) === null || _b === void 0 ? void 0 : _b._id;
    // Add padding to virtual rows
    var rowStyle = __assign(__assign({}, style), { top: Number(style.top) + 2, height: Number(style.height) - 2 });
    return (react_1.default.createElement(Table_1.default, { item: item, selected: selectedIds.includes(assetId), shiftPressed: shiftPressed, style: rowStyle }));
}, react_window_1.areEqual);
var TableView = react_1.forwardRef(function (props, ref) {
    var height = props.height, items = props.items, itemCount = props.itemCount, onItemsRendered = props.onItemsRendered, selectedAssets = props.selectedAssets, width = props.width;
    var shiftPressed = useKeyPress_1.default('Shift');
    var tableRowHeight = useThemeBreakpointValue_1.default('tableRowHeight');
    var selectedIds = (selectedAssets && selectedAssets.map(function (asset) { return asset._id; })) || [];
    return (react_1.default.createElement(Box_1.default, { height: height, width: width },
        react_1.default.createElement(react_window_1.FixedSizeList, { className: "custom-scrollbar", height: height, innerElementType: innerElementType, itemData: {
                items: items,
                selectedIds: selectedIds,
                shiftPressed: shiftPressed
            }, itemCount: itemCount, itemSize: parseInt(tableRowHeight), onItemsRendered: onItemsRendered, ref: ref, style: {
                overflowX: 'hidden'
            }, width: width }, VirtualRow)));
});
exports.default = TableView;
