"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_window_1 = require("react-window");
var useKeyPress_1 = __importDefault(require("../../hooks/useKeyPress"));
var Box_1 = __importDefault(require("../Box"));
var CardViewItem_1 = __importDefault(require("../CardViewItem"));
var innerElementType = function (props) {
    var children = props.children, style = props.style;
    return (react_1.default.createElement(Box_1.default, { mx: "auto", position: "relative", width: style.width },
        react_1.default.createElement("div", { style: style }, children)));
};
var VirtualCell = react_1.memo(function (_a) {
    var _b;
    var columnIndex = _a.columnIndex, data = _a.data, rowIndex = _a.rowIndex, style = _a.style;
    var columnCount = data.columnCount, focusedId = data.focusedId, items = data.items, selectedIds = data.selectedIds, shiftPressed = data.shiftPressed;
    var index = columnCount * rowIndex + columnIndex;
    var item = items[index];
    var assetId = (_b = item === null || item === void 0 ? void 0 : item.asset) === null || _b === void 0 ? void 0 : _b._id;
    // Add padding to virtual cells
    var cellStyle = __assign(__assign({}, style), { left: Number(style.left) + 3, right: Number(style.left) + 3, top: Number(style.top) + 3, bottom: Number(style.top) + 3, width: Number(style.width) - 6, height: Number(style.height) - 6 });
    return (react_1.default.createElement(CardViewItem_1.default, { item: item, focused: focusedId === assetId, key: "grid-" + assetId, selected: selectedIds.includes(assetId), shiftPressed: shiftPressed, style: cellStyle }));
});
var CardView = react_1.forwardRef(function (props, ref) {
    var focusedId = props.focusedId, height = props.height, items = props.items, itemCount = props.itemCount, onItemsRendered = props.onItemsRendered, selectedAssets = props.selectedAssets, width = props.width;
    var shiftPressed = useKeyPress_1.default('Shift');
    var selectedIds = (selectedAssets && selectedAssets.map(function (asset) { return asset._id; })) || [];
    var cardWidth = 250;
    var cardHeight = 200;
    var columnCount = Math.floor(width / cardWidth);
    var rowCount = Math.ceil(itemCount / columnCount);
    return (react_1.default.createElement(react_window_1.VariableSizeGrid, { className: "sanity-media-custom-scrollbar", columnCount: columnCount, columnWidth: function () { return cardWidth; }, height: height, innerElementType: innerElementType, itemData: {
            columnCount: columnCount,
            focusedId: focusedId,
            items: items,
            selectedIds: selectedIds,
            shiftPressed: shiftPressed,
        }, onItemsRendered: onItemsRendered, ref: ref, rowCount: rowCount, rowHeight: function () { return cardHeight; }, style: { overflowX: 'hidden' }, width: width }, VirtualCell));
});
exports.default = CardView;
