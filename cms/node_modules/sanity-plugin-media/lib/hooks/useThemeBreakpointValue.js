"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var theme_1 = __importDefault(require("../styled/theme"));
// Reference: https://usehooks.com/useMedia/
function useThemeBreakpointValue(key) {
    var breakpoints = theme_1.default.breakpoints || [];
    var mediaQueryLists = __spreadArrays([
        window.matchMedia("(max-width: " + breakpoints[0] + ")")
    ], breakpoints.map(function (breakpoint) { return window.matchMedia("(min-width: " + breakpoint + ")"); }));
    var getBreakpointIndex = function () {
        // Get index of first media query that matches
        var index = mediaQueryLists.findIndex(function (mql) { return mql.matches; });
        // return index
        return index;
    };
    var _a = react_1.useState(getBreakpointIndex), breakpointIndex = _a[0], setBreakpointIndex = _a[1];
    // Add event listeners
    react_1.useEffect(function () {
        var handleMatchMedia = function () { return setBreakpointIndex(getBreakpointIndex); };
        mediaQueryLists.forEach(function (mql) { return mql.addListener(handleMatchMedia); });
        // Remove event listeners on cleanup
        return function () {
            mediaQueryLists.forEach(function (mql) { return mql.removeListener(handleMatchMedia); });
        };
    }, []);
    return theme_1.default[key][breakpointIndex];
}
exports.default = useThemeBreakpointValue;
